FROM node:20.11.1-alpine AS base

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine
# Install necessary dependencies
RUN apk add --no-cache libc6-compat

ENV APP_DIR=/app

# Create a non-root user and group
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Ensure the app directory exists and set permissions
RUN mkdir -p ${APP_DIR} && chown -R appuser:appgroup ${APP_DIR}

WORKDIR ${APP_DIR}

# Install dependencies only when needed
FROM base AS deps

ENV HUSKY=0

# Switch to root user to install dependencies
USER root

# Install dependencies based on the preferred package manager
COPY package.json pnpm-lock.yaml* ./
COPY patches ./patches
RUN corepack enable pnpm && pnpm i --frozen-lockfile

# Change ownership to non-root user
RUN chown -R appuser:appgroup ${APP_DIR}

# Rebuild the source code only when needed
FROM base AS builder

# Switch to root to copy files
USER root

COPY --from=deps ${APP_DIR}/node_modules ./node_modules
COPY . .

# Set correct permissions for cache directories to prevent EACCES errors
RUN mkdir -p /app/.cache /app/.next /app/node_modules/.cache \
    && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

ARG NEXT_PUBLIC_APP_NAME
ARG NEXT_PUBLIC_AUTH_PROVIDER_ID
ARG NEXT_PUBLIC_AUTH_LABEL
ARG NEXT_PUBLIC_AUTH_PARAMS
ARG NEXT_PUBLIC_TOU_TEXT
ARG NEXT_PUBLIC_PRIVACY_URL
ARG NEXT_PUBLIC_DOCUMENTATION_URL
ARG NEXT_PUBLIC_FEEDBACK_URL
ARG NEXT_PUBLIC_USERCONTENT_SITE_URL
ARG AUTH_JWKS_ENDPOINT
ARG DUMMY_JWT_TOKEN
ARG NEXT_PUBLIC_WAITLIST_URL
ARG NEXT_PUBLIC_BEE_AGENT_PLATFORM_URL
ARG NEXT_PUBLIC_ARTIFACTS_SITE_URL

ENV NEXT_DISABLE_WARNINGS=1
RUN corepack enable pnpm && pnpm run build;

EXPOSE 3000

ENV PORT 3000

CMD ["pnpm", "run", "start"]
